package com.example.geoblinker.ui.faq

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.geoblinker.network.Api
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class FaqViewModel : ViewModel() {
    
    private val _faqContent = MutableStateFlow<String?>(null)
    val faqContent: StateFlow<String?> = _faqContent.asStateFlow()
    
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
    
    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage.asStateFlow()
    
    fun loadFaqContent() {
        viewModelScope.launch {
            _isLoading.value = true
            _errorMessage.value = null
            
            try {
                Log.d("FaqViewModel", "üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: GET /data?data.lang_vls=1")
                val response = Api.retrofitService.getLangData("1")
                val response2 = Api.retrofitService.getDeviceSignalsData()
                Log.d("FaqViewModel", "üìã –û—Ç–≤–µ—Ç API: code=${response.code}")
                Log.d("FaqViewModel", "üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: $response")
                Log.d("FaqViewModel", "üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: $response2")
                val v = response2.data.data.constants.tracker2.getList()
                Log.d("FaqViewModel", "üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: $v")
                if (response.code == "200") {
                    Log.d("FaqViewModel", "üìã response.data: ${response.data}")
                    Log.d("FaqViewModel", "üìã response.data.data: ${response.data.data}")
                    
                    val langValues = response.data.data.langValues
                    if (langValues != null) {
                        Log.d("FaqViewModel", "üìã –ù–∞–π–¥–µ–Ω–æ langValues, —Ä–∞–∑–º–µ—Ä: ${langValues.size}")
                        Log.d("FaqViewModel", "üìã –í—Å–µ –∫–ª—é—á–∏: ${langValues.keys}")
                        
                        val faqEntry = langValues["geo_blinker_faq"]
                        Log.d("FaqViewModel", "üìã –ü–æ–∏—Å–∫ 'geo_blinker_faq': $faqEntry")
                        // —Ç–∏–ø faqEntry —Ç–µ–ø–µ—Ä—å Map (Int,String), –≥–¥–µ int = –∫–æ–¥ —è–∑—ã–∫–∞, –Ω–∏–∂–µ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–∞ 1 –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
                        if (faqEntry != null && !faqEntry[1].isNullOrBlank()) {
                            Log.d("FaqViewModel", "‚úÖ FAQ –Ω–∞–π–¥–µ–Ω–æ: ${faqEntry[1]}")
                            _faqContent.value = faqEntry[1]
                        } else {
                            Log.w("FaqViewModel", "‚ùå FAQ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–æ–µ")
                            _errorMessage.value = "FAQ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ API"
                        }
                    } else {
                        Log.w("FaqViewModel", "‚ùå langValues = null")
                        _errorMessage.value = "langValues –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ"
                    }
                } else {
                    Log.e("FaqViewModel", "‚ùå API –≤–µ—Ä–Ω—É–ª –∫–æ–¥: ${response.code}")
                    _errorMessage.value = "–û—à–∏–±–∫–∞ API: ${response.code}"
                }
            } catch (e: Exception) {
                _errorMessage.value = "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${e.message}"
            } finally {
                _isLoading.value = false
            }
        }
    }
}
