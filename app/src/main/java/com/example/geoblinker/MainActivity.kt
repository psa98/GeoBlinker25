package com.example.geoblinker

import android.annotation.SuppressLint
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.WindowManager
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.ui.Modifier
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.launch
import com.example.geoblinker.ui.theme.GeoBlinkerTheme
import com.google.firebase.FirebaseApp
import com.google.firebase.crashlytics.FirebaseCrashlytics

class MainActivity : ComponentActivity() {
    @SuppressLint("ViewModelConstructorInComposable")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        FirebaseApp.initializeApp(this)

        // –í–∫–ª—é—á–µ–Ω–∏–µ Crashlytics (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–ª—è debug)
        FirebaseCrashlytics.getInstance().isCrashlyticsCollectionEnabled = true

        // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–ª–∞–≥–æ–≤
        window.clearFlags(WindowManager.LayoutParams.FLAG_SECURE)

        TimeUtils.init(this)
        
        // Handle payment deep links
        handlePaymentDeepLink(intent)
        
        enableEdgeToEdge()
        setContent {
            GeoBlinkerTheme {
                GeoBlinkerScreen()
            }
        }
    }
    
    override fun onNewIntent(intent: Intent) {
        super.onNewIntent(intent)
        Log.d("MainActivity", "üÜï onNewIntent called with: ${intent.dataString}")
        setIntent(intent)
        // –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π intent
        handlePaymentDeepLink(intent)
    }
    
    override fun onResume() {
        super.onResume()
        Log.d("MainActivity", "onResume called")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º deep link
        handlePaymentDeepLink(intent)
        
        // DARHOL ProfileViewModel ni yangilaymiz
        val prefs = getSharedPreferences("profile_prefs", MODE_PRIVATE)
        val maxEndDate = prefs.getLong("max_subscription_end_date", 0)
        if (maxEndDate > 0) {
            Log.d("MainActivity", "üîÑ Found active subscription, updating ProfileViewModel")
            // ProfileViewModel ni yangilash kerak, lekin u yerda access yo'q
            // Shuning uchun subscription qiymatini to'g'ridan-to'g'ri yangilaymiz
            val subscriptionEndDateMs = maxEndDate * 1000
            prefs.edit().putLong("subscription", subscriptionEndDateMs).apply()
            Log.d("MainActivity", "‚úÖ Updated subscription in prefs: $subscriptionEndDateMs")
        }
        
        // –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        val paymentId = prefs.getString("current_payment_id", null)
        if (paymentId != null) {
            Log.d("MainActivity", "‚ö° INSTANT payment check for ID: $paymentId")
            checkPaymentInstantly(paymentId)
        }
    }
    
    private fun checkPaymentInstantly(paymentId: String) {
        lifecycleScope.launch {
            try {
                val repository = com.example.geoblinker.network.SubscriptionRepository(application)
                val result = repository.getPaymentStatus(paymentId)
                
                val prefs = getSharedPreferences("profile_prefs", MODE_PRIVATE)
                
                if (result.isSuccess) {
                    val payment = result.getOrNull()
                    when (payment?.paymentStatus) {
                        6 -> {
                            Log.d("MainActivity", "‚úÖ PAYMENT SUCCESS - Creating subscription")
                            
                            // –°–ù–ê–ß–ê–õ–ê —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                            lifecycleScope.launch {
                                try {
                                       val selectedTariffId = prefs.getInt("selected_tariff_id", 1)
                                    
                                    Log.d("MainActivity", "üèóÔ∏è Creating subscription with tariff ID: $selectedTariffId")
                                    val subscriptionResult = repository.createSubscription(selectedTariffId.toString())
                                    
                                    if (subscriptionResult.isSuccess) {
                                        val subscriptionId = subscriptionResult.getOrNull()
                                        Log.d("MainActivity", "‚úÖ Subscription created in DB with ID: $subscriptionId")
                                        
                                        // –¢–ï–ü–ï–†–¨ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏
                                        val editor = prefs.edit()
                                        editor.putBoolean("payment_success", true)
                                        editor.putString("success_message", "–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                                        editor.putBoolean("subscription_active", true)
                                        
                                        // Tanlangan tarifga qarab podpiska davomini hisoblaymiz
                                        val currentTime = System.currentTimeMillis() / 1000
                                        val selectedTariffId = prefs.getInt("selected_tariff_id", 1)
                                        
                                        Log.d("MainActivity", "üîç BEFORE CALCULATION: selectedTariffId = $selectedTariffId")
                                        // todo - —Ç—É—Ç –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω—ã —Ç–∞—Ä–∏—Ñ—ã, –∏—Ö –Ω–∞–¥–æ –±—Ä–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç–∞–º –±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥
                                        // Tarif ID ga qarab davomni belgilaymiz (ANIQ VAQTLAR)
                                        val durationInSeconds = when (selectedTariffId) {
                                            1 -> {
                                                Log.d("MainActivity", "‚è∞ Tariff 1: 30 days")
                                                30 * 24 * 60 * 60L    // "–ì–æ–¥ –Ω–∞ –º–µ—Å—è—Ü" - 30 kun
                                            }
                                            2 -> {
                                                Log.d("MainActivity", "‚è∞ Tariff 2: 1 day")
                                                24 * 60 * 60L         // "–ì–æ–¥ –Ω–∞ –¥–µ–Ω—å" - 24 soat (1 kun)
                                            }
                                            3 -> {
                                                Log.d("MainActivity", "‚è∞ Tariff 3: 1 HOUR")
                                                60 * 60L              // "–ì–æ–¥ –Ω–∞ —á–∞—Å" - 60 minut (1 soat)
                                            }
                                            4 -> {
                                                Log.d("MainActivity", "‚è∞ Tariff 4: 30 days")
                                                30 * 24 * 60 * 60L    // "–°–∏–ª—å–≤–µ—Ä –Ω–∞ –º–µ—Å—è—Ü" - 30 kun
                                            }
                                            5 -> {
                                                Log.d("MainActivity", "‚è∞ Tariff 5: 1 day")
                                                24 * 60 * 60L         // "–°–∏–ª—å–≤–µ—Ä –Ω–∞ –¥–µ–Ω—å" - 24 soat (1 kun)
                                            }
                                            6 -> {
                                                Log.d("MainActivity", "‚è∞ Tariff 6: 1 HOUR")
                                                60 * 60L              // "–°–∏–ª—å–≤–µ—Ä –Ω–∞ —á–∞—Å" - 60 minut (1 soat)
                                            }
                                            else -> {
                                                Log.d("MainActivity", "‚è∞ Default: 30 days")
                                                30 * 24 * 60 * 60L // Default: 30 kun
                                            }
                                        }
                                        
                                        val endDate = currentTime + durationInSeconds
                                        Log.d("MainActivity", "üìÖ FINAL: Tariff ID: $selectedTariffId, Duration: ${durationInSeconds}s (${durationInSeconds/3600} hours), End date: $endDate")
                                        editor.putLong("max_subscription_end_date", endDate)
                                        
                                        // MUHIM: ProfileViewModel uchun ham subscription ni yangilaymiz
                                        val subscriptionEndDateMs = endDate * 1000
                                        editor.putLong("subscription", subscriptionEndDateMs)
                                        
                                        editor.apply()
                                        
                                        Log.d("MainActivity", "üéØ SUBSCRIPTION FULLY ACTIVATED: ID=$subscriptionId, end_date=$endDate")
                                        
                                        // –¢–∞–∫–∂–µ –≤—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑ API
                                        calculateAndSaveMaxSubscriptionDate()
                                        
                                        // YANGI: ProfileViewModel ni ham yangilaymiz
                                        // Bu popup ni yashirish uchun kerak
                                    } else {
                                        Log.e("MainActivity", "‚ùå Failed to create subscription in DB")
                                        prefs.edit().putString("error_message", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏").apply()
                                    }
                                } catch (e: Exception) {
                                    Log.e("MainActivity", "üí• Error creating subscription", e)
                                    prefs.edit().putString("error_message", "–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏").apply()
                                }
                            }
                        }
                        3 -> {
                            Log.d("MainActivity", "‚ùå PAYMENT CANCELED")
                            prefs.edit().putBoolean("payment_success", false).apply()
                            prefs.edit().putString("error_message", "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑").apply()
                        }
                        else -> {
                            Log.d("MainActivity", "‚è≥ PAYMENT PENDING")
                            return@launch // –ù–µ –æ—á–∏—â–∞–µ–º payment_id, –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–∑–∂–µ
                        }
                    }
                } else {
                    Log.d("MainActivity", "‚ùå PAYMENT CHECK FAILED")
                    prefs.edit().putString("error_message", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑").apply()
                }
                
                // –û—á–∏—â–∞–µ–º payment_id —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                prefs.edit().remove("current_payment_id").apply()
                
            } catch (e: Exception) {
                Log.e("MainActivity", "Error checking payment instantly", e)
            }
        }
    }
    
    private suspend fun calculateAndSaveMaxSubscriptionDate() {
        try {
            val repository = com.example.geoblinker.network.SubscriptionRepository(application)
            val subscriptionsResult = repository.getUserSubscriptions()
            val tariffsResult = repository.getTariffs()
            
            if (subscriptionsResult.isSuccess && tariffsResult.isSuccess) {
                val subscriptions = subscriptionsResult.getOrNull() ?: emptyList()
                val tariffs = tariffsResult.getOrNull() ?: emptyMap()
                
                var maxEndDate = 0L
                
                // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                subscriptions.forEach { subscription ->
                    if (subscription.subsStatus == "1" && subscription.paid == true) {
                        val tariff = tariffs[subscription.tariff]
                        if (tariff != null) {

                            val durationClass = tariff["duration_class"].toString()

                            val durationInSeconds = when (durationClass) {
                                "1"-> 30L * 24 * 3600    // 30 –¥–Ω–µ–π
                                "2"-> 1L * 24 * 3600     // 1 –¥–µ–Ω—å
                                "3"-> 3600L     // 1 —á–∞—Å
                                "4"-> 90L * 24 * 3600    // 90 –¥–Ω–µ–π
                                "5"-> 180L * 24 * 3600   // 180 –¥–Ω–µ–π
                                "6"-> 365L* 24 * 3600   // 365 –¥–Ω–µ–π
                                else -> 0
                            }
                            //val durationInSeconds = tariff["period"].toString().toInt()  * 30 * 24 * 60 * 60L
                            val endDate = subscription.startDate + durationInSeconds
                            
                            if (endDate > maxEndDate) {
                                maxEndDate = endDate
                            }
                        }
                    }
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
                val prefs = getSharedPreferences("profile_prefs", MODE_PRIVATE)
                prefs.edit().putLong("max_subscription_end_date", maxEndDate).apply()
                
                // –ù–ï–ú–ï–î–õ–ï–ù–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                val currentTime = System.currentTimeMillis() / 1000
                val isActive = maxEndDate > currentTime
                prefs.edit().putBoolean("subscription_active", isActive).apply()
                
                Log.d("MainActivity", "üìÖ Max subscription end date saved: $maxEndDate, Active: $isActive")
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                startDailySubscriptionCheck()
            }
        } catch (e: Exception) {
            Log.e("MainActivity", "Error calculating max subscription date", e)
        }
    }
    
    private fun startDailySubscriptionCheck() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º WorkManager –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        val workRequest = androidx.work.PeriodicWorkRequestBuilder<com.example.geoblinker.workers.SubscriptionCheckWorker>(
            24, java.util.concurrent.TimeUnit.HOURS
        ).build()
        
        androidx.work.WorkManager.getInstance(this).enqueueUniquePeriodicWork(
            "daily_subscription_check",
            androidx.work.ExistingPeriodicWorkPolicy.REPLACE,
            workRequest
        )
        
        Log.d("MainActivity", "üîÑ Daily subscription check started")
    }
    
    private fun handlePaymentDeepLink(intent: Intent?) {
        val data: Uri? = intent?.data
        Log.d("MainActivity", "üîç Checking intent data: ${intent?.dataString}")
        
        if (data != null) {
            Log.d("MainActivity", "üì± Intent scheme: ${data.scheme}, host: ${data.host}, path: ${data.path}")
            
            if (data.scheme == "geoblinker" && data.host == "payment") {
                Log.d("PaymentCallback", "üéØ PAYMENT DEEP LINK DETECTED: ${data}")
                val prefs = getSharedPreferences("profile_prefs", MODE_PRIVATE)
                
                when (data.path) {
                    "/success" -> {
                        Log.d("PaymentCallback", "‚úÖ SUCCESS CALLBACK - Setting all flags")
                        
                        // –°–†–ê–ó–£ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º
                        val editor = prefs.edit()
                        editor.putBoolean("payment_success", true)
                        editor.putBoolean("subscription_active", true)
                        editor.putString("success_message", "–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                        
                        // Tanlangan tarifga qarab podpiska davomini hisoblaymiz
                        val currentTime = System.currentTimeMillis() / 1000
                        val selectedTariffId = prefs.getInt("selected_tariff_id", 1)
                        
                        // Tarif ID ga qarab davomni belgilaymiz (ANIQ VAQTLAR)
                        val durationInSeconds = when (selectedTariffId) {
                            1 -> 30 * 24 * 60 * 60L    // "–ì–æ–¥ –Ω–∞ –º–µ—Å—è—Ü" - 30 kun
                            2 -> 24 * 60 * 60L         // "–ì–æ–¥ –Ω–∞ –¥–µ–Ω—å" - 24 soat (1 kun)  
                            3 -> 60 * 60L              // "–ì–æ–¥ –Ω–∞ —á–∞—Å" - 60 minut (1 soat)
                            4 -> 30 * 24 * 60 * 60L    // "–°–∏–ª—å–≤–µ—Ä –Ω–∞ –º–µ—Å—è—Ü" - 30 kun
                            5 -> 24 * 60 * 60L         // "–°–∏–ª—å–≤–µ—Ä –Ω–∞ –¥–µ–Ω—å" - 24 soat (1 kun)
                            6 -> 60 * 60L              // "–°–∏–ª—å–≤–µ—Ä –Ω–∞ —á–∞—Å" - 60 minut (1 soat)
                            else -> 30 * 24 * 60 * 60L // Default: 30 kun
                        }
                        
                        val endDate = currentTime + durationInSeconds
                        Log.d("PaymentCallback", "üìÖ Deep link - Tariff ID: $selectedTariffId, Duration: ${durationInSeconds}s")
                        editor.putLong("max_subscription_end_date", endDate)
                        
                        // MUHIM: ProfileViewModel uchun ham subscription ni yangilaymiz
                        val subscriptionEndDateMs = endDate * 1000
                        editor.putLong("subscription", subscriptionEndDateMs)
                        
                        editor.remove("current_payment_id")
                        editor.apply()
                        
                        Log.d("PaymentCallback", "üéØ SUCCESS FLAGS SET: payment_success=true, subscription_active=true, end_date=$endDate")
                        
                        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑ API
                        lifecycleScope.launch {
                            calculateAndSaveMaxSubscriptionDate()
                        }
                        
                        // –û—á–∏—â–∞–µ–º intent
                        setIntent(Intent())
                    }
                    "/canceled" -> {
                        Log.d("PaymentCallback", "‚ùå CANCELED CALLBACK")
                        prefs.edit().putBoolean("payment_success", false).apply()
                        prefs.edit().remove("current_payment_id").apply()
                        
                        // –û—á–∏—â–∞–µ–º intent
                        setIntent(Intent())
                    }
                }
            } else {
                Log.d("MainActivity", "‚ùå Not a payment deep link")
            }
        } else {
            Log.d("MainActivity", "‚ùå No intent data found")
        }
    }
    
    private fun checkPaymentStatusViaAPI(paymentId: String) {
        lifecycleScope.launch {
            try {
                Log.d("MainActivity", "Checking payment status for ID: $paymentId")
                val repository = com.example.geoblinker.network.SubscriptionRepository(application)
                val result = repository.getPaymentStatus(paymentId)
                
                val prefs = getSharedPreferences("profile_prefs", MODE_PRIVATE)
                
                if (result.isSuccess) {
                    val payment = result.getOrNull()
                    Log.d("MainActivity", "Payment status from API: ${payment?.paymentStatus}")
                    
                    when (payment?.paymentStatus) {
                        6 -> { // PAYMENT_SUCCEEDED
                            Log.d("MainActivity", "‚úÖ Payment SUCCESS confirmed!")
                            prefs.edit().putBoolean("payment_success", true).apply()
                            prefs.edit().remove("current_payment_id").apply()
                        }
                        3 -> { // PAYMENT_CANCELED  
                            Log.d("MainActivity", "‚ùå Payment CANCELED")
                            prefs.edit().remove("current_payment_id").apply()
                        }
                        else -> {
                            Log.d("MainActivity", "‚è≥ Payment status: ${payment?.paymentStatus}")
                        }
                    }
                } else {
                    Log.e("MainActivity", "Failed to get payment status: ${result.exceptionOrNull()}")
                }
            } catch (e: Exception) {
                Log.e("MainActivity", "Error checking payment status", e)
            }
        }
    }
}